#!/bin/bash

# theia controller
VERSION="v0.2.0"

# General usage
function usage
{
    echo "USAGE: theiactl $1"
    exit
}

# Start a container, create it if it doesn't exist
function start
{
    # Command line arguments
    USERNAME=$1
    WKSP=$2
    PORT=$3

    if [[ "$USERNAME" == "" || "$WKSP" == "" ]]
    then
        usage "start name wksp [port]"
    fi

    # Config
    IMAGE=zedchance/theia-"$WKSP"
    N=1  # for multiple containers in the future
    CONTAINER_NAME=theia-"$USERNAME"-"$WKSP"-"$N"
    VOLUME_NAME=vol-"$USERNAME"-"$WKSP"-"$N"

    # First check to see if container already exists
    if [[ $(docker ps -a --filter "name=$CONTAINER_NAME" --format "{{.Names}}") == "$CONTAINER_NAME" ]]
    then
        echo "Starting $CONTAINER_NAME"
        docker start "$CONTAINER_NAME" > /dev/null
        exit
    fi

    # Exit on command fail
    set -e

    # Start parameters
    parameters=(
        "--security-opt seccomp=unconfined"
        "--init"
        "-it"
        "--mount source=$VOLUME_NAME,target=/home"
        "-u 1000:1000"
    )

    # Figure out whether to add to network or publish to port
    if [[ "$PORT" == "" ]]
    then
        echo "Creating container from $IMAGE, adding to theia-net"
        parameters+=("--network theia-net")
    else
        echo "Creating container from $IMAGE on port $PORT"
        parameters+=("-p 127.0.0.1:$PORT:3000")
    fi

    # Add container name and image to parameter list
    parameters+=(
        "--name $CONTAINER_NAME"
        "$IMAGE"
    )

    # Create the container
    docker create ${parameters[@]/#/}

    # Start container
    echo "Starting container"
    docker start "$CONTAINER_NAME"

    # Rename user to specified whoami
    echo "Renaming user to $USERNAME"
    docker exec -u root "$CONTAINER_NAME" usermod -l "$USERNAME" theia
}

# Stop a running container
function stop
{
    # Usage
    USERNAME=$1
    WKSP=$2
    if [[ "$USERNAME" == "" || "$WKSP" == "" ]]
    then
        usage "stop name wksp"
    fi

    N=1  # for multiple containers in the future
    CONTAINER_NAME=theia-"$USERNAME"-"$WKSP"-"$N"

    echo "Stopping $CONTAINER_NAME"
    docker stop "$CONTAINER_NAME" > /dev/null
}

# Stop and remove a container
function remove
{
    # Usage
    USERNAME=$1
    WKSP=$2
    if [[ "$USERNAME" == "" || "$WKSP" == "" ]]
    then
        usage "rm name wksp"
    fi

    N=1  # for multiple containers in the future
    CONTAINER_NAME=theia-"$USERNAME"-"$WKSP"-"$N"

    # Stop container
    stop "$USERNAME" "$WKSP"

    # Remove container
    echo "Removing $CONTAINER_NAME"
    docker rm -f "$CONTAINER_NAME" > /dev/null
}

# Pull latest theia images
function pull
{
    echo "$(date): Pulling latest theia images"
    docker pull zedchance/theia-cs46:latest
    docker pull zedchance/theia-cs66:latest
}

# Backup a container's volume, and create a new one
function new_vol
{
    # Usage
    USERNAME=$1
    WKSP=$2
    if [[ "$USERNAME" == "" || "$WKSP" == "" ]]
    then
        usage "new-vol name wksp"
    fi

    N=1
    VOL=vol-"$USERNAME"-"$WKSP"-"$N"
    BACKUP_VOL="$VOL"-prev

    # Make sure the old volume exists
    if ! docker volume inspect "$VOL" > /dev/null
    then
        exit
    fi

    # Reset the container
    remove "$USERNAME" "$WKSP"

    # Check if theres already a prev vol, if so rm it
    if docker volume inspect "$BACKUP_VOL" > /dev/null
    then
        docker volume rm -f "$BACKUP_VOL" > /dev/null
    fi

    # Backup volume and remove it
    echo "Backing up $VOL to $BACKUP_VOL"
    docker volume create --name "$BACKUP_VOL" > /dev/null
    docker run --rm -it -v "$VOL":/from -v "$BACKUP_VOL":/to alpine ash -c "cp -a /from/. /to"
    echo "Removing $VOL"
    docker volume rm -f "$VOL" > /dev/null
}

# Stop idle containers
function stop_idles
{
    # Stop messages
    INACTIVE="Changed application state from 'ready' to 'closing_window'"
    ERROR="Connection got disposed"

    # 30 min timeout
    TIMEOUT=1800

    # Loop thru running containers
    for CONTAINER in $(ps names)
    do
        # For each of the last 11 log entries
        docker container logs -t -n 11 "$CONTAINER" | while read -r entry
        do
            # Timestamp is the first 30 chars of the log
            TIMESTAMP=${entry:0:30}

            # Check to see if the log entry is the inactive message
            if [[ $entry == *"$INACTIVE"* || $entry == *"$ERROR"* ]]
            then
                # Current time
                NOW=$(date +%s)

                # Date command on macOS
                # THEN=$(date -jf "%Y-%m-%dT%H:%M:%S" "$TIMESTAMP" "+%s")
                # Date command on linux
                THEN=$(date -d "$TIMESTAMP" +%s)

                # Calculate idle time
                DIFF=$((NOW - THEN))
                IDLE_MIN=$((DIFF / 60))

                # Verbose dry run
                if [[ $1 == "-v" ]]
                then
                    echo "Closed container found: $CONTAINER"
                    echo "    Log: ${entry:31:100}"
                    echo "    Timestamp: $TIMESTAMP"
                    echo "    $CONTAINER has been idle for $IDLE_MIN minutes"
                    break
                fi

                # Check to see if container has timed out
                if [[ $DIFF -gt $TIMEOUT ]]
                then
                    echo "$(date): $CONTAINER has exceeded time out, stopping..."
                    docker stop "$CONTAINER" > /dev/null
                fi

                # Break because we found the inactive/error message
                break
            fi
        done
    done
}

# List all theia containers
# Running theia containers expose port 3000
function ps
{
    # Check if only names should be listed
    if [[ $1 == "names" ]]
    then
        docker ps --filter expose=3000 --format "{{.Names}}"
    else
        docker ps -a --filter expose=3000 --format "table {{.Names}}\t{{.State}}\t{{.Status}}\t{{.Image}}\t{{.Mounts}}\t{{.Size}}"
    fi
}

# Return the state of a given container
function state
{
    # Usage
    USERNAME=$1
    WKSP=$2
    if [[ "$USERNAME" == "" || "$WKSP" == "" ]]
    then
        usage "state name wksp"
    fi

    N=1  # for multiple containers in the future
    CONTAINER_NAME=theia-"$USERNAME"-"$WKSP"-"$N"

    # Show state
    docker ps -a --filter "name=$CONTAINER_NAME" --format="{{.State}}"
}

# Main
case $1 in
    "start")
        start $2 $3 $4
        ;;
    "stop")
        stop $2 $3
        ;;
    "rm")
        remove $2 $3
        ;;
    "ps")
        ps $2
        ;;
    "pull")
        pull
        ;;
    "new-vol")
        new_vol $2 $3
        ;;
    "stop-idles")
        stop_idles $2
        ;;
    "state")
        state $2 $3
        ;;
    "version")
        echo $VERSION
        ;;
    *)
        usage "[start|stop|rm|ps|pull|new-vol|stop-idles|version]"
        ;;
esac

